name: Database Migration

on:
  push:
    branches: [main, staging]
    paths:
      - 'shared/schema.ts'
      - 'migrations/**'
  pull_request:
    branches: [main]
    paths:
      - 'shared/schema.ts'
      - 'migrations/**'

jobs:
  migrate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
        exclude:
          - environment: production
            # Only run production migrations on main branch
            condition: ${{ github.ref != 'refs/heads/main' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate migration files
      run: npx drizzle-kit generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run database health check
      run: npx tsx scripts/db-health.ts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run migrations
      run: npx tsx scripts/migrate.ts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Verify migration success
      run: npx drizzle-kit check
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Post-migration health check
      run: npx tsx scripts/db-health.ts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

  schema-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate schema types
      run: npm run check
    
    - name: Generate migration preview
      run: npx drizzle-kit generate --name="automated-migration-$(date +%s)"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}